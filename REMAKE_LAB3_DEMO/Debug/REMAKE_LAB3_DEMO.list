
REMAKE_LAB3_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002548  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002674  08002674  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002674  08002674  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002674  08002674  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002674  08002674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800267c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000064  080026e0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080026e0  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000911b  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aca  00000000  00000000  000291a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002ac78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002b6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b39  00000000  00000000  0002c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1db  00000000  00000000  00042b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008221c  00000000  00000000  0004dd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cff88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  000cffdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800263c 	.word	0x0800263c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800263c 	.word	0x0800263c

0800014c <button_reading>:
int KeyReg2[NO_OF_BUTTONS] = {IS_RELEASED};
int KeyReg3[NO_OF_BUTTONS] = {IS_RELEASED};
int TimeOutForKeyPress[NO_OF_BUTTONS] = {500};
int flag[NO_OF_BUTTONS];

void button_reading(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e08b      	b.n	8000270 <button_reading+0x124>
		KeyReg2[i] = KeyReg1[i];
 8000158:	4a4a      	ldr	r2, [pc, #296]	; (8000284 <button_reading+0x138>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4949      	ldr	r1, [pc, #292]	; (8000288 <button_reading+0x13c>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000168:	4a48      	ldr	r2, [pc, #288]	; (800028c <button_reading+0x140>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4944      	ldr	r1, [pc, #272]	; (8000284 <button_reading+0x138>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch (i){                                           // button is being read
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b02      	cmp	r3, #2
 800017c:	d01f      	beq.n	80001be <button_reading+0x72>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b02      	cmp	r3, #2
 8000182:	dc27      	bgt.n	80001d4 <button_reading+0x88>
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d003      	beq.n	8000192 <button_reading+0x46>
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d00b      	beq.n	80001a8 <button_reading+0x5c>
			break;
		case NO_3:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
			break;
		default:
			break;
 8000190:	e020      	b.n	80001d4 <button_reading+0x88>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000192:	2104      	movs	r1, #4
 8000194:	483e      	ldr	r0, [pc, #248]	; (8000290 <button_reading+0x144>)
 8000196:	f001 fa11 	bl	80015bc <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	4619      	mov	r1, r3
 800019e:	4a3b      	ldr	r2, [pc, #236]	; (800028c <button_reading+0x140>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001a6:	e016      	b.n	80001d6 <button_reading+0x8a>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80001a8:	2108      	movs	r1, #8
 80001aa:	4839      	ldr	r0, [pc, #228]	; (8000290 <button_reading+0x144>)
 80001ac:	f001 fa06 	bl	80015bc <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	4a35      	ldr	r2, [pc, #212]	; (800028c <button_reading+0x140>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001bc:	e00b      	b.n	80001d6 <button_reading+0x8a>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80001be:	2110      	movs	r1, #16
 80001c0:	4833      	ldr	r0, [pc, #204]	; (8000290 <button_reading+0x144>)
 80001c2:	f001 f9fb 	bl	80015bc <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a30      	ldr	r2, [pc, #192]	; (800028c <button_reading+0x140>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001d2:	e000      	b.n	80001d6 <button_reading+0x8a>
			break;
 80001d4:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001d6:	4a2b      	ldr	r2, [pc, #172]	; (8000284 <button_reading+0x138>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001de:	492b      	ldr	r1, [pc, #172]	; (800028c <button_reading+0x140>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d13f      	bne.n	800026a <button_reading+0x11e>
 80001ea:	4a26      	ldr	r2, [pc, #152]	; (8000284 <button_reading+0x138>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4925      	ldr	r1, [pc, #148]	; (8000288 <button_reading+0x13c>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d135      	bne.n	800026a <button_reading+0x11e>
			if (KeyReg2[i] != KeyReg3[i]){
 80001fe:	4a22      	ldr	r2, [pc, #136]	; (8000288 <button_reading+0x13c>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4923      	ldr	r1, [pc, #140]	; (8000294 <button_reading+0x148>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d017      	beq.n	8000242 <button_reading+0xf6>
				KeyReg3[i] = KeyReg2[i];
 8000212:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <button_reading+0x13c>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	491e      	ldr	r1, [pc, #120]	; (8000294 <button_reading+0x148>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == IS_PRESSED){
 8000222:	4a1c      	ldr	r2, [pc, #112]	; (8000294 <button_reading+0x148>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d11d      	bne.n	800026a <button_reading+0x11e>
					TimeOutForKeyPress[i] = 500;
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <button_reading+0x14c>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 f82e 	bl	800029c <subKeyProcess>
 8000240:	e013      	b.n	800026a <button_reading+0x11e>
				}
			} else {
				TimeOutForKeyPress[i] --;
 8000242:	4a15      	ldr	r2, [pc, #84]	; (8000298 <button_reading+0x14c>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024a:	1e5a      	subs	r2, r3, #1
 800024c:	4912      	ldr	r1, [pc, #72]	; (8000298 <button_reading+0x14c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000254:	4a10      	ldr	r2, [pc, #64]	; (8000298 <button_reading+0x14c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d104      	bne.n	800026a <button_reading+0x11e>
				  KeyReg3[i] = IS_RELEASED;
 8000260:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <button_reading+0x148>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2101      	movs	r1, #1
 8000266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_BUTTONS; i++){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b02      	cmp	r3, #2
 8000274:	f77f af70 	ble.w	8000158 <button_reading+0xc>
				}
			}
		}
	}
}
 8000278:	bf00      	nop
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	2000000c 	.word	0x2000000c
 8000288:	20000018 	.word	0x20000018
 800028c:	20000000 	.word	0x20000000
 8000290:	40010800 	.word	0x40010800
 8000294:	20000024 	.word	0x20000024
 8000298:	20000030 	.word	0x20000030

0800029c <subKeyProcess>:

void subKeyProcess(int index){
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	flag[index] = 1;
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <subKeyProcess+0x1c>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2101      	movs	r1, #1
 80002aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	200000c0 	.word	0x200000c0

080002bc <checkPressed>:

int checkPressed(int index){
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	if (flag[index] == 1){
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <checkPressed+0x30>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d106      	bne.n	80002de <checkPressed+0x22>
		flag[index] = 0;
 80002d0:	4a06      	ldr	r2, [pc, #24]	; (80002ec <checkPressed+0x30>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2100      	movs	r1, #0
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002da:	2301      	movs	r3, #1
 80002dc:	e000      	b.n	80002e0 <checkPressed+0x24>
	}
	return 0;
 80002de:	2300      	movs	r3, #0
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	200000c0 	.word	0x200000c0

080002f0 <clear>:
#include "main.h"
#include "global.h"

int led_7seg_index = 0;

void clear(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2120      	movs	r1, #32
 80002f8:	4807      	ldr	r0, [pc, #28]	; (8000318 <clear+0x28>)
 80002fa:	f001 f976 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_R1_Pin | LED_Y1_Pin | LED_G1_Pin
 80002fe:	2201      	movs	r2, #1
 8000300:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000304:	4804      	ldr	r0, [pc, #16]	; (8000318 <clear+0x28>)
 8000306:	f001 f970 	bl	80015ea <HAL_GPIO_WritePin>
							| LED_R2_Pin | LED_Y2_Pin | LED_G2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin
 800030a:	2201      	movs	r2, #1
 800030c:	217f      	movs	r1, #127	; 0x7f
 800030e:	4803      	ldr	r0, [pc, #12]	; (800031c <clear+0x2c>)
 8000310:	f001 f96b 	bl	80015ea <HAL_GPIO_WritePin>
							| SEG4_Pin | SEG5_Pin | SEG6_Pin, GPIO_PIN_SET);
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40010800 	.word	0x40010800
 800031c:	40010c00 	.word	0x40010c00

08000320 <blink_led>:
}

void clear_debug_led(){
	HAL_GPIO_WritePin(LED_TEST_GPIO_Port, LED_TEST_Pin, GPIO_PIN_SET);
}
void blink_led(int index){
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	switch(index){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d015      	beq.n	800035a <blink_led+0x3a>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b02      	cmp	r3, #2
 8000332:	dc18      	bgt.n	8000366 <blink_led+0x46>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d003      	beq.n	8000342 <blink_led+0x22>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d006      	beq.n	800034e <blink_led+0x2e>
	case LED_GREEN:
		HAL_GPIO_TogglePin(GPIOA, LED_G1_Pin | LED_G2_Pin);
		break;
		break;
	default:
		break;
 8000340:	e011      	b.n	8000366 <blink_led+0x46>
		HAL_GPIO_TogglePin(GPIOA, LED_R1_Pin | LED_R2_Pin);
 8000342:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000346:	480a      	ldr	r0, [pc, #40]	; (8000370 <blink_led+0x50>)
 8000348:	f001 f967 	bl	800161a <HAL_GPIO_TogglePin>
		break;
 800034c:	e00c      	b.n	8000368 <blink_led+0x48>
		HAL_GPIO_TogglePin(GPIOA, LED_Y1_Pin | LED_Y2_Pin);
 800034e:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000352:	4807      	ldr	r0, [pc, #28]	; (8000370 <blink_led+0x50>)
 8000354:	f001 f961 	bl	800161a <HAL_GPIO_TogglePin>
		break;
 8000358:	e006      	b.n	8000368 <blink_led+0x48>
		HAL_GPIO_TogglePin(GPIOA, LED_G1_Pin | LED_G2_Pin);
 800035a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800035e:	4804      	ldr	r0, [pc, #16]	; (8000370 <blink_led+0x50>)
 8000360:	f001 f95b 	bl	800161a <HAL_GPIO_TogglePin>
		break;
 8000364:	e000      	b.n	8000368 <blink_led+0x48>
		break;
 8000366:	bf00      	nop
	}
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40010800 	.word	0x40010800

08000374 <blinky_led>:
void blinky_led(int index){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	if(isTimerFlagOn(TIMER_LED)){
 800037c:	2003      	movs	r0, #3
 800037e:	f000 fd35 	bl	8000dec <isTimerFlagOn>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d007      	beq.n	8000398 <blinky_led+0x24>
		setTimer(TIMER_LED, 500);
 8000388:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800038c:	2003      	movs	r0, #3
 800038e:	f000 fd05 	bl	8000d9c <setTimer>
		blink_led(index);
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f7ff ffc4 	bl	8000320 <blink_led>
	}
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <update_time_buffer>:

void update_time_buffer(int index, int time){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
	traffic_time_buffer[index][0] = time/10;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <update_time_buffer+0x4c>)
 80003ae:	fb82 1203 	smull	r1, r2, r2, r3
 80003b2:	1092      	asrs	r2, r2, #2
 80003b4:	17db      	asrs	r3, r3, #31
 80003b6:	1ad2      	subs	r2, r2, r3
 80003b8:	490d      	ldr	r1, [pc, #52]	; (80003f0 <update_time_buffer+0x50>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	traffic_time_buffer[index][1] = time%10;
 80003c0:	6839      	ldr	r1, [r7, #0]
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <update_time_buffer+0x4c>)
 80003c4:	fb83 2301 	smull	r2, r3, r3, r1
 80003c8:	109a      	asrs	r2, r3, #2
 80003ca:	17cb      	asrs	r3, r1, #31
 80003cc:	1ad2      	subs	r2, r2, r3
 80003ce:	4613      	mov	r3, r2
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	4413      	add	r3, r2
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	1aca      	subs	r2, r1, r3
 80003d8:	4905      	ldr	r1, [pc, #20]	; (80003f0 <update_time_buffer+0x50>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	440b      	add	r3, r1
 80003e0:	605a      	str	r2, [r3, #4]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	66666667 	.word	0x66666667
 80003f0:	20000048 	.word	0x20000048

080003f4 <display_7_seg>:

void display_7_seg(int num){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2b09      	cmp	r3, #9
 8000400:	d87f      	bhi.n	8000502 <display_7_seg+0x10e>
 8000402:	a201      	add	r2, pc, #4	; (adr r2, 8000408 <display_7_seg+0x14>)
 8000404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000408:	08000431 	.word	0x08000431
 800040c:	08000447 	.word	0x08000447
 8000410:	0800045d 	.word	0x0800045d
 8000414:	08000473 	.word	0x08000473
 8000418:	08000489 	.word	0x08000489
 800041c:	0800049f 	.word	0x0800049f
 8000420:	080004b5 	.word	0x080004b5
 8000424:	080004cb 	.word	0x080004cb
 8000428:	080004e1 	.word	0x080004e1
 800042c:	080004ed 	.word	0x080004ed
	switch (num){
	case 0:                                                          // display 0
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin |
 8000430:	2200      	movs	r2, #0
 8000432:	213f      	movs	r1, #63	; 0x3f
 8000434:	4835      	ldr	r0, [pc, #212]	; (800050c <display_7_seg+0x118>)
 8000436:	f001 f8d8 	bl	80015ea <HAL_GPIO_WritePin>
								SEG3_Pin | SEG4_Pin | SEG5_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, 1);
 800043a:	2201      	movs	r2, #1
 800043c:	2140      	movs	r1, #64	; 0x40
 800043e:	4833      	ldr	r0, [pc, #204]	; (800050c <display_7_seg+0x118>)
 8000440:	f001 f8d3 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 8000444:	e05e      	b.n	8000504 <display_7_seg+0x110>
	case 1:                                                           // display 1
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin | SEG2_Pin, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2106      	movs	r1, #6
 800044a:	4830      	ldr	r0, [pc, #192]	; (800050c <display_7_seg+0x118>)
 800044c:	f001 f8cd 	bl	80015ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG3_Pin | SEG4_Pin |
 8000450:	2201      	movs	r2, #1
 8000452:	2179      	movs	r1, #121	; 0x79
 8000454:	482d      	ldr	r0, [pc, #180]	; (800050c <display_7_seg+0x118>)
 8000456:	f001 f8c8 	bl	80015ea <HAL_GPIO_WritePin>
								SEG5_Pin | SEG6_Pin, 1);
		break;
 800045a:	e053      	b.n	8000504 <display_7_seg+0x110>
	case 2:                                                          // display 2
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG3_Pin |
 800045c:	2200      	movs	r2, #0
 800045e:	215b      	movs	r1, #91	; 0x5b
 8000460:	482a      	ldr	r0, [pc, #168]	; (800050c <display_7_seg+0x118>)
 8000462:	f001 f8c2 	bl	80015ea <HAL_GPIO_WritePin>
								SEG4_Pin | SEG6_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin | SEG5_Pin, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	2124      	movs	r1, #36	; 0x24
 800046a:	4828      	ldr	r0, [pc, #160]	; (800050c <display_7_seg+0x118>)
 800046c:	f001 f8bd 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 8000470:	e048      	b.n	8000504 <display_7_seg+0x110>
	case 3:                                                          // display 3
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin |
 8000472:	2200      	movs	r2, #0
 8000474:	214f      	movs	r1, #79	; 0x4f
 8000476:	4825      	ldr	r0, [pc, #148]	; (800050c <display_7_seg+0x118>)
 8000478:	f001 f8b7 	bl	80015ea <HAL_GPIO_WritePin>
								SEG3_Pin | SEG6_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin | SEG5_Pin, 1);
 800047c:	2201      	movs	r2, #1
 800047e:	2130      	movs	r1, #48	; 0x30
 8000480:	4822      	ldr	r0, [pc, #136]	; (800050c <display_7_seg+0x118>)
 8000482:	f001 f8b2 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 8000486:	e03d      	b.n	8000504 <display_7_seg+0x110>
	case 4:                                                          // display 4
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin | SEG2_Pin | SEG5_Pin |
 8000488:	2200      	movs	r2, #0
 800048a:	2166      	movs	r1, #102	; 0x66
 800048c:	481f      	ldr	r0, [pc, #124]	; (800050c <display_7_seg+0x118>)
 800048e:	f001 f8ac 	bl	80015ea <HAL_GPIO_WritePin>
								SEG6_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG3_Pin | SEG4_Pin, 1);
 8000492:	2201      	movs	r2, #1
 8000494:	2119      	movs	r1, #25
 8000496:	481d      	ldr	r0, [pc, #116]	; (800050c <display_7_seg+0x118>)
 8000498:	f001 f8a7 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 800049c:	e032      	b.n	8000504 <display_7_seg+0x110>
	case 5:                                                          // display 5
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG2_Pin | SEG3_Pin |
 800049e:	2200      	movs	r2, #0
 80004a0:	216d      	movs	r1, #109	; 0x6d
 80004a2:	481a      	ldr	r0, [pc, #104]	; (800050c <display_7_seg+0x118>)
 80004a4:	f001 f8a1 	bl	80015ea <HAL_GPIO_WritePin>
								SEG5_Pin | SEG6_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin | SEG4_Pin, 1);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2112      	movs	r1, #18
 80004ac:	4817      	ldr	r0, [pc, #92]	; (800050c <display_7_seg+0x118>)
 80004ae:	f001 f89c 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 80004b2:	e027      	b.n	8000504 <display_7_seg+0x110>
	case 6:                                                           // display 6
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG2_Pin | SEG3_Pin |
 80004b4:	2200      	movs	r2, #0
 80004b6:	217d      	movs	r1, #125	; 0x7d
 80004b8:	4814      	ldr	r0, [pc, #80]	; (800050c <display_7_seg+0x118>)
 80004ba:	f001 f896 	bl	80015ea <HAL_GPIO_WritePin>
								SEG4_Pin | SEG5_Pin | SEG6_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, 1);
 80004be:	2201      	movs	r2, #1
 80004c0:	2102      	movs	r1, #2
 80004c2:	4812      	ldr	r0, [pc, #72]	; (800050c <display_7_seg+0x118>)
 80004c4:	f001 f891 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 80004c8:	e01c      	b.n	8000504 <display_7_seg+0x110>
	case 7:                                                            // display 7
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2107      	movs	r1, #7
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <display_7_seg+0x118>)
 80004d0:	f001 f88b 	bl	80015ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin | SEG4_Pin | SEG5_Pin |
 80004d4:	2201      	movs	r2, #1
 80004d6:	2178      	movs	r1, #120	; 0x78
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <display_7_seg+0x118>)
 80004da:	f001 f886 	bl	80015ea <HAL_GPIO_WritePin>
								SEG6_Pin, 1);
		break;
 80004de:	e011      	b.n	8000504 <display_7_seg+0x110>
	case 8:                                                            // display 8
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin |
 80004e0:	2200      	movs	r2, #0
 80004e2:	217f      	movs	r1, #127	; 0x7f
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <display_7_seg+0x118>)
 80004e6:	f001 f880 	bl	80015ea <HAL_GPIO_WritePin>
								SEG3_Pin | SEG4_Pin | SEG5_Pin |
								SEG6_Pin, 0);
		break;
 80004ea:	e00b      	b.n	8000504 <display_7_seg+0x110>
	case 9:                                                            // display 9
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin |
 80004ec:	2200      	movs	r2, #0
 80004ee:	216f      	movs	r1, #111	; 0x6f
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <display_7_seg+0x118>)
 80004f2:	f001 f87a 	bl	80015ea <HAL_GPIO_WritePin>
								SEG3_Pin | SEG5_Pin | SEG6_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2110      	movs	r1, #16
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <display_7_seg+0x118>)
 80004fc:	f001 f875 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 8000500:	e000      	b.n	8000504 <display_7_seg+0x110>
	default:
		break;
 8000502:	bf00      	nop
	}
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40010c00 	.word	0x40010c00

08000510 <enable_7_seg>:

void enable_7_seg(int index){
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b03      	cmp	r3, #3
 800051c:	d83e      	bhi.n	800059c <enable_7_seg+0x8c>
 800051e:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <enable_7_seg+0x14>)
 8000520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000524:	08000535 	.word	0x08000535
 8000528:	0800054f 	.word	0x0800054f
 800052c:	08000569 	.word	0x08000569
 8000530:	08000583 	.word	0x08000583
	switch (index){
	case 0:
		HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053a:	4824      	ldr	r0, [pc, #144]	; (80005cc <enable_7_seg+0xbc>)
 800053c:	f001 f855 	bl	80015ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000546:	4821      	ldr	r0, [pc, #132]	; (80005cc <enable_7_seg+0xbc>)
 8000548:	f001 f84f 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 800054c:	e027      	b.n	800059e <enable_7_seg+0x8e>
	case 1:
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	481d      	ldr	r0, [pc, #116]	; (80005cc <enable_7_seg+0xbc>)
 8000556:	f001 f848 	bl	80015ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8000560:	481a      	ldr	r0, [pc, #104]	; (80005cc <enable_7_seg+0xbc>)
 8000562:	f001 f842 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 8000566:	e01a      	b.n	800059e <enable_7_seg+0x8e>
	case 2:
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056e:	4817      	ldr	r0, [pc, #92]	; (80005cc <enable_7_seg+0xbc>)
 8000570:	f001 f83b 	bl	80015ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN0_Pin | EN3_Pin, SET);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 800057a:	4814      	ldr	r0, [pc, #80]	; (80005cc <enable_7_seg+0xbc>)
 800057c:	f001 f835 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 8000580:	e00d      	b.n	800059e <enable_7_seg+0x8e>
	case 3:
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000588:	4810      	ldr	r0, [pc, #64]	; (80005cc <enable_7_seg+0xbc>)
 800058a:	f001 f82e 	bl	80015ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN0_Pin, SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000594:	480d      	ldr	r0, [pc, #52]	; (80005cc <enable_7_seg+0xbc>)
 8000596:	f001 f828 	bl	80015ea <HAL_GPIO_WritePin>
		break;
 800059a:	e000      	b.n	800059e <enable_7_seg+0x8e>
	default:
		break;
 800059c:	bf00      	nop
	}
	display_7_seg(traffic_time_buffer[index/2][index%2]);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	0fda      	lsrs	r2, r3, #31
 80005a2:	4413      	add	r3, r2
 80005a4:	105b      	asrs	r3, r3, #1
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	bfb8      	it	lt
 80005b2:	425b      	neglt	r3, r3
 80005b4:	4906      	ldr	r1, [pc, #24]	; (80005d0 <enable_7_seg+0xc0>)
 80005b6:	0052      	lsls	r2, r2, #1
 80005b8:	4413      	add	r3, r2
 80005ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ff18 	bl	80003f4 <display_7_seg>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40010c00 	.word	0x40010c00
 80005d0:	20000048 	.word	0x20000048

080005d4 <display_led>:
void display_led(int index){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	switch(traffic_state[index]){
 80005dc:	4a52      	ldr	r2, [pc, #328]	; (8000728 <display_led+0x154>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e4:	3bca      	subs	r3, #202	; 0xca
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d87b      	bhi.n	80006e2 <display_led+0x10e>
 80005ea:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <display_led+0x1c>)
 80005ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f0:	08000601 	.word	0x08000601
 80005f4:	08000647 	.word	0x08000647
 80005f8:	0800067b 	.word	0x0800067b
 80005fc:	080006af 	.word	0x080006af
	case DISP_INIT:                                       //init
		//TODO
		if (index == ROW){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d10f      	bne.n	8000626 <display_led+0x52>
			traffic_state[index] = DISP_RED;
 8000606:	4a48      	ldr	r2, [pc, #288]	; (8000728 <display_led+0x154>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	21cb      	movs	r1, #203	; 0xcb
 800060c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			setTimer(index, traffic_duration[LED_RED]*TIME_UNIT);
 8000610:	4b46      	ldr	r3, [pc, #280]	; (800072c <display_led+0x158>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 fbbc 	bl	8000d9c <setTimer>
		}
		else {
			traffic_state[index] = DISP_GREEN;
			setTimer(index, traffic_duration[LED_GREEN]*TIME_UNIT);
		}
		break;
 8000624:	e064      	b.n	80006f0 <display_led+0x11c>
			traffic_state[index] = DISP_GREEN;
 8000626:	4a40      	ldr	r2, [pc, #256]	; (8000728 <display_led+0x154>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	21cc      	movs	r1, #204	; 0xcc
 800062c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			setTimer(index, traffic_duration[LED_GREEN]*TIME_UNIT);
 8000630:	4b3e      	ldr	r3, [pc, #248]	; (800072c <display_led+0x158>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000638:	fb02 f303 	mul.w	r3, r2, r3
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 fbac 	bl	8000d9c <setTimer>
		break;
 8000644:	e054      	b.n	80006f0 <display_led+0x11c>

	case DISP_RED:                                         //display red led
		display_light(index, LED_RED);
 8000646:	2100      	movs	r1, #0
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f875 	bl	8000738 <display_light>

		if (isTimerFlagOn(index)){
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 fbcc 	bl	8000dec <isTimerFlagOn>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d045      	beq.n	80006e6 <display_led+0x112>
			traffic_state[index] = DISP_GREEN;
 800065a:	4a33      	ldr	r2, [pc, #204]	; (8000728 <display_led+0x154>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	21cc      	movs	r1, #204	; 0xcc
 8000660:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			setTimer(index, traffic_duration[LED_GREEN]*TIME_UNIT);
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <display_led+0x158>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	4619      	mov	r1, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 fb92 	bl	8000d9c <setTimer>
		}
		break;
 8000678:	e035      	b.n	80006e6 <display_led+0x112>

	case DISP_GREEN:                                       //display green led
		display_light(index, LED_GREEN);
 800067a:	2102      	movs	r1, #2
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f85b 	bl	8000738 <display_light>

		if (isTimerFlagOn(index)){
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 fbb2 	bl	8000dec <isTimerFlagOn>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d02d      	beq.n	80006ea <display_led+0x116>
			traffic_state[index] = DISP_AMBER;
 800068e:	4a26      	ldr	r2, [pc, #152]	; (8000728 <display_led+0x154>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	21cd      	movs	r1, #205	; 0xcd
 8000694:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			setTimer(index, traffic_duration[LED_AMBER]*TIME_UNIT);
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <display_led+0x158>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a0:	fb02 f303 	mul.w	r3, r2, r3
 80006a4:	4619      	mov	r1, r3
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 fb78 	bl	8000d9c <setTimer>
		}
		break;
 80006ac:	e01d      	b.n	80006ea <display_led+0x116>

	case DISP_AMBER:                                       //display yellow led
		display_light(index, LED_AMBER);
 80006ae:	2101      	movs	r1, #1
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f841 	bl	8000738 <display_light>

		if (isTimerFlagOn(index)){
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 fb98 	bl	8000dec <isTimerFlagOn>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d015      	beq.n	80006ee <display_led+0x11a>
			traffic_state[index] = DISP_RED;
 80006c2:	4a19      	ldr	r2, [pc, #100]	; (8000728 <display_led+0x154>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	21cb      	movs	r1, #203	; 0xcb
 80006c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			setTimer(index, traffic_duration[LED_RED]*TIME_UNIT);
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <display_led+0x158>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d4:	fb02 f303 	mul.w	r3, r2, r3
 80006d8:	4619      	mov	r1, r3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 fb5e 	bl	8000d9c <setTimer>
		}
		break;
 80006e0:	e005      	b.n	80006ee <display_led+0x11a>

	default:
		break;
 80006e2:	bf00      	nop
 80006e4:	e004      	b.n	80006f0 <display_led+0x11c>
		break;
 80006e6:	bf00      	nop
 80006e8:	e002      	b.n	80006f0 <display_led+0x11c>
		break;
 80006ea:	bf00      	nop
 80006ec:	e000      	b.n	80006f0 <display_led+0x11c>
		break;
 80006ee:	bf00      	nop
	}
	traffic_curr_time[index] = (getCurrTimer(index)+1000)/TIME_UNIT; //get current counter (unit: sec)
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fb6b 	bl	8000dcc <getCurrTimer>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80006fc:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <display_led+0x15c>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	1192      	asrs	r2, r2, #6
 8000704:	17db      	asrs	r3, r3, #31
 8000706:	1ad2      	subs	r2, r2, r3
 8000708:	490a      	ldr	r1, [pc, #40]	; (8000734 <display_led+0x160>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	update_time_buffer(index, traffic_curr_time[index]);
 8000710:	4a08      	ldr	r2, [pc, #32]	; (8000734 <display_led+0x160>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000718:	4619      	mov	r1, r3
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff fe40 	bl	80003a0 <update_time_buffer>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000090 	.word	0x20000090
 800072c:	2000003c 	.word	0x2000003c
 8000730:	10624dd3 	.word	0x10624dd3
 8000734:	20000098 	.word	0x20000098

08000738 <display_light>:


void display_light(int index, int type){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	switch(index){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <display_light+0x18>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d035      	beq.n	80007ba <display_light+0x82>
		default:
			break;
		}
		break;
	default:
		break;
 800074e:	e06a      	b.n	8000826 <display_light+0xee>
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d015      	beq.n	8000782 <display_light+0x4a>
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	2b02      	cmp	r3, #2
 800075a:	dc2c      	bgt.n	80007b6 <display_light+0x7e>
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d003      	beq.n	800076a <display_light+0x32>
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d019      	beq.n	800079c <display_light+0x64>
			break;
 8000768:	e025      	b.n	80007b6 <display_light+0x7e>
			HAL_GPIO_WritePin(GPIOA, LED_R1_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	4830      	ldr	r0, [pc, #192]	; (8000830 <display_light+0xf8>)
 8000770:	f000 ff3b 	bl	80015ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_G1_Pin | LED_Y1_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7140 	mov.w	r1, #768	; 0x300
 800077a:	482d      	ldr	r0, [pc, #180]	; (8000830 <display_light+0xf8>)
 800077c:	f000 ff35 	bl	80015ea <HAL_GPIO_WritePin>
			break;
 8000780:	e01a      	b.n	80007b8 <display_light+0x80>
			HAL_GPIO_WritePin(GPIOA, LED_G1_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000788:	4829      	ldr	r0, [pc, #164]	; (8000830 <display_light+0xf8>)
 800078a:	f000 ff2e 	bl	80015ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_Y1_Pin | LED_R1_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000794:	4826      	ldr	r0, [pc, #152]	; (8000830 <display_light+0xf8>)
 8000796:	f000 ff28 	bl	80015ea <HAL_GPIO_WritePin>
			break;
 800079a:	e00d      	b.n	80007b8 <display_light+0x80>
			HAL_GPIO_WritePin(GPIOA, LED_Y1_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	4823      	ldr	r0, [pc, #140]	; (8000830 <display_light+0xf8>)
 80007a4:	f000 ff21 	bl	80015ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_R1_Pin | LED_G1_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80007ae:	4820      	ldr	r0, [pc, #128]	; (8000830 <display_light+0xf8>)
 80007b0:	f000 ff1b 	bl	80015ea <HAL_GPIO_WritePin>
			break;
 80007b4:	e000      	b.n	80007b8 <display_light+0x80>
			break;
 80007b6:	bf00      	nop
		break;
 80007b8:	e035      	b.n	8000826 <display_light+0xee>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d016      	beq.n	80007ee <display_light+0xb6>
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	dc2d      	bgt.n	8000822 <display_light+0xea>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <display_light+0x9c>
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d01a      	beq.n	8000808 <display_light+0xd0>
			break;
 80007d2:	e026      	b.n	8000822 <display_light+0xea>
			HAL_GPIO_WritePin(GPIOA, LED_R2_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007da:	4815      	ldr	r0, [pc, #84]	; (8000830 <display_light+0xf8>)
 80007dc:	f000 ff05 	bl	80015ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_G2_Pin | LED_Y2_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <display_light+0xf8>)
 80007e8:	f000 feff 	bl	80015ea <HAL_GPIO_WritePin>
			break;
 80007ec:	e01a      	b.n	8000824 <display_light+0xec>
			HAL_GPIO_WritePin(GPIOA, LED_G2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f4:	480e      	ldr	r0, [pc, #56]	; (8000830 <display_light+0xf8>)
 80007f6:	f000 fef8 	bl	80015ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_Y2_Pin | LED_R2_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <display_light+0xf8>)
 8000802:	f000 fef2 	bl	80015ea <HAL_GPIO_WritePin>
			break;
 8000806:	e00d      	b.n	8000824 <display_light+0xec>
			HAL_GPIO_WritePin(GPIOA, LED_Y2_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <display_light+0xf8>)
 8000810:	f000 feeb 	bl	80015ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_R2_Pin | LED_G2_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <display_light+0xf8>)
 800081c:	f000 fee5 	bl	80015ea <HAL_GPIO_WritePin>
			break;
 8000820:	e000      	b.n	8000824 <display_light+0xec>
			break;
 8000822:	bf00      	nop
		break;
 8000824:	bf00      	nop
	}
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40010800 	.word	0x40010800

08000834 <display_time_7seg>:

void display_time_7seg(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	if (isTimerFlagOn(TIMER_7SEG)){
 8000838:	2002      	movs	r0, #2
 800083a:	f000 fad7 	bl	8000dec <isTimerFlagOn>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d014      	beq.n	800086e <display_time_7seg+0x3a>
		setTimer(TIMER_7SEG, 250);
 8000844:	21fa      	movs	r1, #250	; 0xfa
 8000846:	2002      	movs	r0, #2
 8000848:	f000 faa8 	bl	8000d9c <setTimer>
		enable_7_seg(led_7seg_index);
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <display_time_7seg+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fe5d 	bl	8000510 <enable_7_seg>
		led_7seg_index = (led_7seg_index+1)%4;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <display_time_7seg+0x40>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	425a      	negs	r2, r3
 800085e:	f003 0303 	and.w	r3, r3, #3
 8000862:	f002 0203 	and.w	r2, r2, #3
 8000866:	bf58      	it	pl
 8000868:	4253      	negpl	r3, r2
 800086a:	4a02      	ldr	r2, [pc, #8]	; (8000874 <display_time_7seg+0x40>)
 800086c:	6013      	str	r3, [r2, #0]
	}
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000080 	.word	0x20000080

08000878 <modify_traffic_buffer>:
#include "display_led.h"

int curr_mode = 0;
int temp_duration = 0;

void modify_traffic_buffer(int mode, int duration){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
	traffic_time_buffer[0][0] = duration/10;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <modify_traffic_buffer+0x70>)
 8000886:	fb82 1203 	smull	r1, r2, r2, r3
 800088a:	1092      	asrs	r2, r2, #2
 800088c:	17db      	asrs	r3, r3, #31
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	4a16      	ldr	r2, [pc, #88]	; (80008ec <modify_traffic_buffer+0x74>)
 8000892:	6013      	str	r3, [r2, #0]
	traffic_time_buffer[0][1] = duration%10;
 8000894:	6839      	ldr	r1, [r7, #0]
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <modify_traffic_buffer+0x70>)
 8000898:	fb83 2301 	smull	r2, r3, r3, r1
 800089c:	109a      	asrs	r2, r3, #2
 800089e:	17cb      	asrs	r3, r1, #31
 80008a0:	1ad2      	subs	r2, r2, r3
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	1aca      	subs	r2, r1, r3
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <modify_traffic_buffer+0x74>)
 80008ae:	605a      	str	r2, [r3, #4]
	traffic_time_buffer[1][0] = mode/10;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <modify_traffic_buffer+0x70>)
 80008b4:	fb82 1203 	smull	r1, r2, r2, r3
 80008b8:	1092      	asrs	r2, r2, #2
 80008ba:	17db      	asrs	r3, r3, #31
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <modify_traffic_buffer+0x74>)
 80008c0:	6093      	str	r3, [r2, #8]
	traffic_time_buffer[1][1] = mode%10;
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <modify_traffic_buffer+0x70>)
 80008c6:	fb83 2301 	smull	r2, r3, r3, r1
 80008ca:	109a      	asrs	r2, r3, #2
 80008cc:	17cb      	asrs	r3, r1, #31
 80008ce:	1ad2      	subs	r2, r2, r3
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	1aca      	subs	r2, r1, r3
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <modify_traffic_buffer+0x74>)
 80008dc:	60da      	str	r2, [r3, #12]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	66666667 	.word	0x66666667
 80008ec:	20000048 	.word	0x20000048

080008f0 <change>:

void change(int mode){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	switch (mode){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b0e      	cmp	r3, #14
 80008fc:	d019      	beq.n	8000932 <change+0x42>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0e      	cmp	r3, #14
 8000902:	dc1e      	bgt.n	8000942 <change+0x52>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b0c      	cmp	r3, #12
 8000908:	d003      	beq.n	8000912 <change+0x22>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0d      	cmp	r3, #13
 800090e:	d008      	beq.n	8000922 <change+0x32>
		temp_duration = traffic_duration[LED_GREEN];
		curr_mode = 4;
		break;

	default:
		break;
 8000910:	e017      	b.n	8000942 <change+0x52>
		temp_duration = traffic_duration[LED_RED];
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <change+0x6c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <change+0x70>)
 8000918:	6013      	str	r3, [r2, #0]
		curr_mode = 2;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <change+0x74>)
 800091c:	2202      	movs	r2, #2
 800091e:	601a      	str	r2, [r3, #0]
		break;
 8000920:	e010      	b.n	8000944 <change+0x54>
		temp_duration = traffic_duration[LED_AMBER];
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <change+0x6c>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <change+0x70>)
 8000928:	6013      	str	r3, [r2, #0]
		curr_mode = 3;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <change+0x74>)
 800092c:	2203      	movs	r2, #3
 800092e:	601a      	str	r2, [r3, #0]
		break;
 8000930:	e008      	b.n	8000944 <change+0x54>
		temp_duration = traffic_duration[LED_GREEN];
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <change+0x6c>)
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <change+0x70>)
 8000938:	6013      	str	r3, [r2, #0]
		curr_mode = 4;
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <change+0x74>)
 800093c:	2204      	movs	r2, #4
 800093e:	601a      	str	r2, [r3, #0]
		break;
 8000940:	e000      	b.n	8000944 <change+0x54>
		break;
 8000942:	bf00      	nop
	}
	modify_traffic_buffer(curr_mode, temp_duration);
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <change+0x74>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a05      	ldr	r2, [pc, #20]	; (8000960 <change+0x70>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff92 	bl	8000878 <modify_traffic_buffer>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000003c 	.word	0x2000003c
 8000960:	20000088 	.word	0x20000088
 8000964:	20000084 	.word	0x20000084

08000968 <increase_duration>:

void increase_duration(){
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GPIOA, 0x0020);
	temp_duration = temp_duration+1;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <increase_duration+0x30>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a09      	ldr	r2, [pc, #36]	; (8000998 <increase_duration+0x30>)
 8000974:	6013      	str	r3, [r2, #0]
	if (temp_duration == 100) temp_duration = 1;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <increase_duration+0x30>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b64      	cmp	r3, #100	; 0x64
 800097c:	d102      	bne.n	8000984 <increase_duration+0x1c>
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <increase_duration+0x30>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
	modify_traffic_buffer(curr_mode, temp_duration);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <increase_duration+0x34>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a03      	ldr	r2, [pc, #12]	; (8000998 <increase_duration+0x30>)
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff72 	bl	8000878 <modify_traffic_buffer>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000088 	.word	0x20000088
 800099c:	20000084 	.word	0x20000084

080009a0 <update>:

void update(int led){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	traffic_duration[led] = temp_duration;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <update+0x2c>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4908      	ldr	r1, [pc, #32]	; (80009d0 <update+0x30>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	modify_traffic_buffer(curr_mode, temp_duration);
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <update+0x34>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <update+0x2c>)
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff5a 	bl	8000878 <modify_traffic_buffer>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000088 	.word	0x20000088
 80009d0:	2000003c 	.word	0x2000003c
 80009d4:	20000084 	.word	0x20000084

080009d8 <fsm_run>:
#include "global.h"
#include "button.h"
#include "display_led.h"
#include "duration.h"

void fsm_run(){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	switch(current_mode){
 80009dc:	4b63      	ldr	r3, [pc, #396]	; (8000b6c <fsm_run+0x194>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3b0a      	subs	r3, #10
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	f200 80b7 	bhi.w	8000b56 <fsm_run+0x17e>
 80009e8:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <fsm_run+0x18>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a05 	.word	0x08000a05
 80009f4:	08000a25 	.word	0x08000a25
 80009f8:	08000a5f 	.word	0x08000a5f
 80009fc:	08000ab3 	.word	0x08000ab3
 8000a00:	08000b07 	.word	0x08000b07
	case INIT:                      // INIT
		clear();
 8000a04:	f7ff fc74 	bl	80002f0 <clear>
		current_mode = MODE_1;
 8000a08:	4b58      	ldr	r3, [pc, #352]	; (8000b6c <fsm_run+0x194>)
 8000a0a:	220b      	movs	r2, #11
 8000a0c:	601a      	str	r2, [r3, #0]
		traffic_state[ROW] = DISP_INIT;      //ROW
 8000a0e:	4b58      	ldr	r3, [pc, #352]	; (8000b70 <fsm_run+0x198>)
 8000a10:	22ca      	movs	r2, #202	; 0xca
 8000a12:	601a      	str	r2, [r3, #0]
		traffic_state[COL] = DISP_INIT;      //COLUMN
 8000a14:	4b56      	ldr	r3, [pc, #344]	; (8000b70 <fsm_run+0x198>)
 8000a16:	22ca      	movs	r2, #202	; 0xca
 8000a18:	605a      	str	r2, [r3, #4]
		setTimer(TIMER_7SEG, 250);
 8000a1a:	21fa      	movs	r1, #250	; 0xfa
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f000 f9bd 	bl	8000d9c <setTimer>
		break;
 8000a22:	e0a1      	b.n	8000b68 <fsm_run+0x190>
	case MODE_1:                            // switch from auto to manual mode
		display_led(ROW);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fdd5 	bl	80005d4 <display_led>
		display_led(COL);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff fdd2 	bl	80005d4 <display_led>
		display_time_7seg();
 8000a30:	f7ff ff00 	bl	8000834 <display_time_7seg>
		if (checkPressed(NO_1)){                   //pressing button 1 to change to next mode
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fc41 	bl	80002bc <checkPressed>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 808c 	beq.w	8000b5a <fsm_run+0x182>
			current_mode = MODE_2;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <fsm_run+0x194>)
 8000a44:	220c      	movs	r2, #12
 8000a46:	601a      	str	r2, [r3, #0]
			change(MODE_2);
 8000a48:	200c      	movs	r0, #12
 8000a4a:	f7ff ff51 	bl	80008f0 <change>
			setTimer(TIMER_LED, 500);
 8000a4e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a52:	2003      	movs	r0, #3
 8000a54:	f000 f9a2 	bl	8000d9c <setTimer>
			clear();
 8000a58:	f7ff fc4a 	bl	80002f0 <clear>
		}
		break;
 8000a5c:	e07d      	b.n	8000b5a <fsm_run+0x182>


	case MODE_2:                             //RED
		blinky_led(LED_RED);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fc88 	bl	8000374 <blinky_led>
		display_time_7seg();
 8000a64:	f7ff fee6 	bl	8000834 <display_time_7seg>


		if (checkPressed(NO_1)){                  //pressing button 1 to change to next mode
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fc27 	bl	80002bc <checkPressed>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00c      	beq.n	8000a8e <fsm_run+0xb6>
			current_mode = MODE_3;
 8000a74:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <fsm_run+0x194>)
 8000a76:	220d      	movs	r2, #13
 8000a78:	601a      	str	r2, [r3, #0]
			change(MODE_3);
 8000a7a:	200d      	movs	r0, #13
 8000a7c:	f7ff ff38 	bl	80008f0 <change>
			setTimer(TIMER_LED, 500);
 8000a80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 f989 	bl	8000d9c <setTimer>
			clear();
 8000a8a:	f7ff fc31 	bl	80002f0 <clear>
		}

		if (checkPressed(NO_2)) {
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fc14 	bl	80002bc <checkPressed>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <fsm_run+0xc6>
			increase_duration();
 8000a9a:	f7ff ff65 	bl	8000968 <increase_duration>
		}
		if (checkPressed(NO_3)) {
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f7ff fc0c 	bl	80002bc <checkPressed>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d059      	beq.n	8000b5e <fsm_run+0x186>
			update(LED_RED);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff ff78 	bl	80009a0 <update>
		}
		break;
 8000ab0:	e055      	b.n	8000b5e <fsm_run+0x186>


	case MODE_3:                            // AMBER(YELLOW)

		blinky_led(LED_AMBER);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fc5e 	bl	8000374 <blinky_led>
		display_time_7seg();
 8000ab8:	f7ff febc 	bl	8000834 <display_time_7seg>
		if (checkPressed(NO_1)){                  //pressing button 1 to change to next mode
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fbfd 	bl	80002bc <checkPressed>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00c      	beq.n	8000ae2 <fsm_run+0x10a>
			current_mode = MODE_4;
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <fsm_run+0x194>)
 8000aca:	220e      	movs	r2, #14
 8000acc:	601a      	str	r2, [r3, #0]
			change(MODE_4);
 8000ace:	200e      	movs	r0, #14
 8000ad0:	f7ff ff0e 	bl	80008f0 <change>
			setTimer(TIMER_LED, 500);
 8000ad4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f95f 	bl	8000d9c <setTimer>
			clear();
 8000ade:	f7ff fc07 	bl	80002f0 <clear>
		}
		if (checkPressed(NO_2)){
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff fbea 	bl	80002bc <checkPressed>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <fsm_run+0x11a>
			increase_duration();
 8000aee:	f7ff ff3b 	bl	8000968 <increase_duration>
		}
		if (checkPressed(NO_3)) {
 8000af2:	2002      	movs	r0, #2
 8000af4:	f7ff fbe2 	bl	80002bc <checkPressed>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d031      	beq.n	8000b62 <fsm_run+0x18a>
			update(LED_AMBER);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff ff4e 	bl	80009a0 <update>
		}
		break;
 8000b04:	e02d      	b.n	8000b62 <fsm_run+0x18a>
	case MODE_4:                         // GREEN
		blinky_led(LED_GREEN);
 8000b06:	2002      	movs	r0, #2
 8000b08:	f7ff fc34 	bl	8000374 <blinky_led>
		display_time_7seg();
 8000b0c:	f7ff fe92 	bl	8000834 <display_time_7seg>
		if (checkPressed(NO_1)){                    //pressing button 1 to change to next mode
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fbd3 	bl	80002bc <checkPressed>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00a      	beq.n	8000b32 <fsm_run+0x15a>
			current_mode = MODE_1;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <fsm_run+0x194>)
 8000b1e:	220b      	movs	r2, #11
 8000b20:	601a      	str	r2, [r3, #0]
			traffic_state[ROW] = DISP_INIT;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <fsm_run+0x198>)
 8000b24:	22ca      	movs	r2, #202	; 0xca
 8000b26:	601a      	str	r2, [r3, #0]
			traffic_state[COL] = DISP_INIT;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <fsm_run+0x198>)
 8000b2a:	22ca      	movs	r2, #202	; 0xca
 8000b2c:	605a      	str	r2, [r3, #4]
			clear();
 8000b2e:	f7ff fbdf 	bl	80002f0 <clear>
		}
		if (checkPressed(NO_2)) {
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fbc2 	bl	80002bc <checkPressed>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <fsm_run+0x16a>
			increase_duration();
 8000b3e:	f7ff ff13 	bl	8000968 <increase_duration>
		}
		if (checkPressed(NO_3)) {
 8000b42:	2002      	movs	r0, #2
 8000b44:	f7ff fbba 	bl	80002bc <checkPressed>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00b      	beq.n	8000b66 <fsm_run+0x18e>
			update(LED_GREEN);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff ff26 	bl	80009a0 <update>
		}
		break;
 8000b54:	e007      	b.n	8000b66 <fsm_run+0x18e>
	default:
		break;
 8000b56:	bf00      	nop
 8000b58:	e006      	b.n	8000b68 <fsm_run+0x190>
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e004      	b.n	8000b68 <fsm_run+0x190>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e002      	b.n	8000b68 <fsm_run+0x190>
		break;
 8000b62:	bf00      	nop
 8000b64:	e000      	b.n	8000b68 <fsm_run+0x190>
		break;
 8000b66:	bf00      	nop
	}
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	20000090 	.word	0x20000090

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b78:	f000 fa36 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f812 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f000 f898 	bl	8000cb4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b84:	f000 f84a 	bl	8000c1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <main+0x28>)
 8000b8a:	f001 f997 	bl	8001ebc <HAL_TIM_Base_Start_IT>
  current_mode = INIT;
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <main+0x2c>)
 8000b90:	220a      	movs	r2, #10
 8000b92:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_run();
 8000b94:	f7ff ff20 	bl	80009d8 <fsm_run>
 8000b98:	e7fc      	b.n	8000b94 <main+0x20>
 8000b9a:	bf00      	nop
 8000b9c:	200000cc 	.word	0x200000cc
 8000ba0:	2000008c 	.word	0x2000008c

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b090      	sub	sp, #64	; 0x40
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	2228      	movs	r2, #40	; 0x28
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 fd3a 	bl	800262c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fd36 	bl	800164c <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000be6:	f000 f8d3 	bl	8000d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 ffa2 	bl	8001b4c <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c0e:	f000 f8bf 	bl	8000d90 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	3740      	adds	r7, #64	; 0x40
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c42:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c62:	f001 f8db 	bl	8001e1c <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c6c:	f000 f890 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c7e:	f001 fa71 	bl	8002164 <HAL_TIM_ConfigClockSource>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c88:	f000 f882 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_TIM2_Init+0x94>)
 8000c9a:	f001 fc39 	bl	8002510 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ca4:	f000 f874 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000cc 	.word	0x200000cc

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_GPIO_Init+0xb8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin|LED_R1_Pin|LED_Y1_Pin|LED_G1_Pin
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 51fd 	mov.w	r1, #8096	; 0x1fa0
 8000cfe:	481c      	ldr	r0, [pc, #112]	; (8000d70 <MX_GPIO_Init+0xbc>)
 8000d00:	f000 fc73 	bl	80015ea <HAL_GPIO_WritePin>
                          |LED_R2_Pin|LED_Y2_Pin|LED_G2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|EN2_Pin
 8000d04:	2201      	movs	r2, #1
 8000d06:	f640 717f 	movw	r1, #3967	; 0xf7f
 8000d0a:	481a      	ldr	r0, [pc, #104]	; (8000d74 <MX_GPIO_Init+0xc0>)
 8000d0c:	f000 fc6d 	bl	80015ea <HAL_GPIO_WritePin>
                          |EN3_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin;
 8000d10:	231c      	movs	r3, #28
 8000d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4619      	mov	r1, r3
 8000d22:	4813      	ldr	r0, [pc, #76]	; (8000d70 <MX_GPIO_Init+0xbc>)
 8000d24:	f000 fad0 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TEST_Pin LED_R1_Pin LED_Y1_Pin LED_G1_Pin
                           LED_R2_Pin LED_Y2_Pin LED_G2_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|LED_R1_Pin|LED_Y1_Pin|LED_G1_Pin
 8000d28:	f44f 53fd 	mov.w	r3, #8096	; 0x1fa0
 8000d2c:	60bb      	str	r3, [r7, #8]
                          |LED_R2_Pin|LED_Y2_Pin|LED_G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2302      	movs	r3, #2
 8000d38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <MX_GPIO_Init+0xbc>)
 8000d42:	f000 fac1 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin EN2_Pin
                           EN3_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|EN2_Pin
 8000d46:	f640 737f 	movw	r3, #3967	; 0xf7f
 8000d4a:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2302      	movs	r3, #2
 8000d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_GPIO_Init+0xc0>)
 8000d60:	f000 fab2 	bl	80012c8 <HAL_GPIO_Init>

}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d80:	f000 f84e 	bl	8000e20 <timerRun>
	button_reading();
 8000d84:	f7ff f9e2 	bl	800014c <button_reading>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <setTimer>:
#include "software_timer.h"

int flagTimer[MAX_TIMER] = {0};
int counterTimer[MAX_TIMER] = {0};

void setTimer(int index, int duration){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	counterTimer[index] = duration / CYCLE;
 8000da6:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <setTimer+0x28>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	flagTimer[index] = 0;
 8000db0:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <setTimer+0x2c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2100      	movs	r1, #0
 8000db6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	200000b0 	.word	0x200000b0
 8000dc8:	200000a0 	.word	0x200000a0

08000dcc <getCurrTimer>:

int getCurrTimer(int index){
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	return counterTimer[index]*CYCLE;
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <getCurrTimer+0x1c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200000b0 	.word	0x200000b0

08000dec <isTimerFlagOn>:

char isTimerFlagOn(int index){
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	if (flagTimer[index] == 1){
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <isTimerFlagOn+0x30>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d106      	bne.n	8000e0e <isTimerFlagOn+0x22>
		flagTimer[index] = 0;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <isTimerFlagOn+0x30>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2100      	movs	r1, #0
 8000e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <isTimerFlagOn+0x24>
	}
	return 0;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200000a0 	.word	0x200000a0

08000e20 <timerRun>:

void timerRun(){
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_TIMER; i++){
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	e01c      	b.n	8000e66 <timerRun+0x46>
		if (counterTimer[i] > 0){
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <timerRun+0x58>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	dd13      	ble.n	8000e60 <timerRun+0x40>
			counterTimer[i]--;
 8000e38:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <timerRun+0x58>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	490d      	ldr	r1, [pc, #52]	; (8000e78 <timerRun+0x58>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (counterTimer[i] <= 0){
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <timerRun+0x58>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dc04      	bgt.n	8000e60 <timerRun+0x40>
				flagTimer[i] = 1;
 8000e56:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <timerRun+0x5c>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<MAX_TIMER; i++){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3301      	adds	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	dddf      	ble.n	8000e2c <timerRun+0xc>
			}
		}
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	200000b0 	.word	0x200000b0
 8000e7c:	200000a0 	.word	0x200000a0

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_MspInit+0x5c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a14      	ldr	r2, [pc, #80]	; (8000edc <HAL_MspInit+0x5c>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_MspInit+0x5c>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_MspInit+0x5c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_MspInit+0x5c>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_MspInit+0x5c>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_MspInit+0x60>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_MspInit+0x60>)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000

08000ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef4:	d113      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_TIM_Base_MspInit+0x44>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_TIM_Base_MspInit+0x44>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_TIM_Base_MspInit+0x44>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	201c      	movs	r0, #28
 8000f14:	f000 f9a1 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f18:	201c      	movs	r0, #28
 8000f1a:	f000 f9ba 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <NMI_Handler+0x4>

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f72:	f000 f87f 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM2_IRQHandler+0x10>)
 8000f82:	f000 ffe7 	bl	8001f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000cc 	.word	0x200000cc

08000f90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	; (8000fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	; (8000fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fc2:	f7ff ffe5 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f001 fb0d 	bl	80025e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fca:	f7ff fdd3 	bl	8000b74 <main>
  bx lr
 8000fce:	4770      	bx	lr
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000fd8:	0800267c 	.word	0x0800267c
  ldr r2, =_sbss
 8000fdc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000fe0:	20000118 	.word	0x20000118

08000fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_2_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_Init+0x28>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_Init+0x28>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f923 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	200f      	movs	r0, #15
 8001000:	f000 f808 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff ff3c 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f93b 	bl	80012ae <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 f903 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000058 	.word	0x20000058
 800106c:	20000060 	.word	0x20000060
 8001070:	2000005c 	.word	0x2000005c

08001074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x1c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_IncTick+0x20>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a03      	ldr	r2, [pc, #12]	; (8001094 <HAL_IncTick+0x20>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	20000060 	.word	0x20000060
 8001094:	20000114 	.word	0x20000114

08001098 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <HAL_GetTick+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000114 	.word	0x20000114

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4906      	ldr	r1, [pc, #24]	; (8001144 <__NVIC_EnableIRQ+0x34>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff90 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff2d 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff42 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff90 	bl	800119c <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5f 	bl	8001148 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff35 	bl	8001110 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b08b      	sub	sp, #44	; 0x2c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	e148      	b.n	800156e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012dc:	2201      	movs	r2, #1
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8137 	bne.w	8001568 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4aa3      	ldr	r2, [pc, #652]	; (800158c <HAL_GPIO_Init+0x2c4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d05e      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001304:	4aa1      	ldr	r2, [pc, #644]	; (800158c <HAL_GPIO_Init+0x2c4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d875      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800130a:	4aa1      	ldr	r2, [pc, #644]	; (8001590 <HAL_GPIO_Init+0x2c8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d058      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001310:	4a9f      	ldr	r2, [pc, #636]	; (8001590 <HAL_GPIO_Init+0x2c8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d86f      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001316:	4a9f      	ldr	r2, [pc, #636]	; (8001594 <HAL_GPIO_Init+0x2cc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d052      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 800131c:	4a9d      	ldr	r2, [pc, #628]	; (8001594 <HAL_GPIO_Init+0x2cc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d869      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001322:	4a9d      	ldr	r2, [pc, #628]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d04c      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001328:	4a9b      	ldr	r2, [pc, #620]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d863      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800132e:	4a9b      	ldr	r2, [pc, #620]	; (800159c <HAL_GPIO_Init+0x2d4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d046      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001334:	4a99      	ldr	r2, [pc, #612]	; (800159c <HAL_GPIO_Init+0x2d4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d85d      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800133a:	2b12      	cmp	r3, #18
 800133c:	d82a      	bhi.n	8001394 <HAL_GPIO_Init+0xcc>
 800133e:	2b12      	cmp	r3, #18
 8001340:	d859      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <HAL_GPIO_Init+0x80>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	080013c3 	.word	0x080013c3
 800134c:	0800139d 	.word	0x0800139d
 8001350:	080013af 	.word	0x080013af
 8001354:	080013f1 	.word	0x080013f1
 8001358:	080013f7 	.word	0x080013f7
 800135c:	080013f7 	.word	0x080013f7
 8001360:	080013f7 	.word	0x080013f7
 8001364:	080013f7 	.word	0x080013f7
 8001368:	080013f7 	.word	0x080013f7
 800136c:	080013f7 	.word	0x080013f7
 8001370:	080013f7 	.word	0x080013f7
 8001374:	080013f7 	.word	0x080013f7
 8001378:	080013f7 	.word	0x080013f7
 800137c:	080013f7 	.word	0x080013f7
 8001380:	080013f7 	.word	0x080013f7
 8001384:	080013f7 	.word	0x080013f7
 8001388:	080013f7 	.word	0x080013f7
 800138c:	080013a5 	.word	0x080013a5
 8001390:	080013b9 	.word	0x080013b9
 8001394:	4a82      	ldr	r2, [pc, #520]	; (80015a0 <HAL_GPIO_Init+0x2d8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800139a:	e02c      	b.n	80013f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	623b      	str	r3, [r7, #32]
          break;
 80013a2:	e029      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	3304      	adds	r3, #4
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e024      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	3308      	adds	r3, #8
 80013b4:	623b      	str	r3, [r7, #32]
          break;
 80013b6:	e01f      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	330c      	adds	r3, #12
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e01a      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ca:	2304      	movs	r3, #4
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e013      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d8:	2308      	movs	r3, #8
 80013da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	611a      	str	r2, [r3, #16]
          break;
 80013e2:	e009      	b.n	80013f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	615a      	str	r2, [r3, #20]
          break;
 80013ee:	e003      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
          break;
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          break;
 80013f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d801      	bhi.n	8001402 <HAL_GPIO_Init+0x13a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	e001      	b.n	8001406 <HAL_GPIO_Init+0x13e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d802      	bhi.n	8001414 <HAL_GPIO_Init+0x14c>
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x152>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	3b08      	subs	r3, #8
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	210f      	movs	r1, #15
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	6a39      	ldr	r1, [r7, #32]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	431a      	orrs	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8090 	beq.w	8001568 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001448:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_GPIO_Init+0x2dc>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_GPIO_Init+0x2dc>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_GPIO_Init+0x2dc>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001460:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <HAL_GPIO_Init+0x2e0>)
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a49      	ldr	r2, [pc, #292]	; (80015ac <HAL_GPIO_Init+0x2e4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d00d      	beq.n	80014a8 <HAL_GPIO_Init+0x1e0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a48      	ldr	r2, [pc, #288]	; (80015b0 <HAL_GPIO_Init+0x2e8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d007      	beq.n	80014a4 <HAL_GPIO_Init+0x1dc>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a47      	ldr	r2, [pc, #284]	; (80015b4 <HAL_GPIO_Init+0x2ec>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d101      	bne.n	80014a0 <HAL_GPIO_Init+0x1d8>
 800149c:	2302      	movs	r3, #2
 800149e:	e004      	b.n	80014aa <HAL_GPIO_Init+0x1e2>
 80014a0:	2303      	movs	r3, #3
 80014a2:	e002      	b.n	80014aa <HAL_GPIO_Init+0x1e2>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <HAL_GPIO_Init+0x1e2>
 80014a8:	2300      	movs	r3, #0
 80014aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ac:	f002 0203 	and.w	r2, r2, #3
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	4093      	lsls	r3, r2
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ba:	493b      	ldr	r1, [pc, #236]	; (80015a8 <HAL_GPIO_Init+0x2e0>)
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	3302      	adds	r3, #2
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014d4:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4937      	ldr	r1, [pc, #220]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014e2:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	4933      	ldr	r1, [pc, #204]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	492d      	ldr	r1, [pc, #180]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	43db      	mvns	r3, r3
 8001512:	4929      	ldr	r1, [pc, #164]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 8001514:	4013      	ands	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	4923      	ldr	r1, [pc, #140]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	608b      	str	r3, [r1, #8]
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	43db      	mvns	r3, r3
 800153a:	491f      	ldr	r1, [pc, #124]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 800153c:	4013      	ands	r3, r2
 800153e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	4919      	ldr	r1, [pc, #100]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	60cb      	str	r3, [r1, #12]
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	43db      	mvns	r3, r3
 8001562:	4915      	ldr	r1, [pc, #84]	; (80015b8 <HAL_GPIO_Init+0x2f0>)
 8001564:	4013      	ands	r3, r2
 8001566:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	3301      	adds	r3, #1
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	f47f aeaf 	bne.w	80012dc <HAL_GPIO_Init+0x14>
  }
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	372c      	adds	r7, #44	; 0x2c
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	10320000 	.word	0x10320000
 8001590:	10310000 	.word	0x10310000
 8001594:	10220000 	.word	0x10220000
 8001598:	10210000 	.word	0x10210000
 800159c:	10120000 	.word	0x10120000
 80015a0:	10110000 	.word	0x10110000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40010800 	.word	0x40010800
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	40011000 	.word	0x40011000
 80015b8:	40010400 	.word	0x40010400

080015bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e001      	b.n	80015de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015fa:	787b      	ldrb	r3, [r7, #1]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001600:	887a      	ldrh	r2, [r7, #2]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001606:	e003      	b.n	8001610 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	041a      	lsls	r2, r3, #16
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800162c:	887a      	ldrh	r2, [r7, #2]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4013      	ands	r3, r2
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43d9      	mvns	r1, r3
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	400b      	ands	r3, r1
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	611a      	str	r2, [r3, #16]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e26c      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8087 	beq.w	800177a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800166c:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b04      	cmp	r3, #4
 8001676:	d00c      	beq.n	8001692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001678:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b08      	cmp	r3, #8
 8001682:	d112      	bne.n	80016aa <HAL_RCC_OscConfig+0x5e>
 8001684:	4b8c      	ldr	r3, [pc, #560]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001690:	d10b      	bne.n	80016aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001692:	4b89      	ldr	r3, [pc, #548]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d06c      	beq.n	8001778 <HAL_RCC_OscConfig+0x12c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d168      	bne.n	8001778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e246      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x76>
 80016b4:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a7f      	ldr	r2, [pc, #508]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e02e      	b.n	8001720 <HAL_RCC_OscConfig+0xd4>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x98>
 80016ca:	4b7b      	ldr	r3, [pc, #492]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7a      	ldr	r2, [pc, #488]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b78      	ldr	r3, [pc, #480]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a77      	ldr	r2, [pc, #476]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e01d      	b.n	8001720 <HAL_RCC_OscConfig+0xd4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0xbc>
 80016ee:	4b72      	ldr	r3, [pc, #456]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a71      	ldr	r2, [pc, #452]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0xd4>
 8001708:	4b6b      	ldr	r3, [pc, #428]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a6a      	ldr	r2, [pc, #424]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800170e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a67      	ldr	r2, [pc, #412]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800171a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fcb6 	bl	8001098 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fcb2 	bl	8001098 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1fa      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0xe4>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fca2 	bl	8001098 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fc9e 	bl	8001098 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1e6      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x10c>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d063      	beq.n	800184e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001786:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b08      	cmp	r3, #8
 800179c:	d11c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x18c>
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d116      	bne.n	80017d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x176>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e1ba      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4939      	ldr	r1, [pc, #228]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d6:	e03a      	b.n	800184e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e0:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fc57 	bl	8001098 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff fc53 	bl	8001098 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e19b      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4927      	ldr	r1, [pc, #156]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fc36 	bl	8001098 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fc32 	bl	8001098 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e17a      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03a      	beq.n	80018d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d019      	beq.n	8001896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff fc16 	bl	8001098 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff fc12 	bl	8001098 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e15a      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800188e:	2001      	movs	r0, #1
 8001890:	f000 faa6 	bl	8001de0 <RCC_Delay>
 8001894:	e01c      	b.n	80018d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7ff fbfc 	bl	8001098 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a2:	e00f      	b.n	80018c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff fbf8 	bl	8001098 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d908      	bls.n	80018c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e140      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	42420000 	.word	0x42420000
 80018c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b9e      	ldr	r3, [pc, #632]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1e9      	bne.n	80018a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a6 	beq.w	8001a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b97      	ldr	r3, [pc, #604]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10d      	bne.n	800190a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b94      	ldr	r3, [pc, #592]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a93      	ldr	r2, [pc, #588]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b91      	ldr	r3, [pc, #580]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001906:	2301      	movs	r3, #1
 8001908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	4b8e      	ldr	r3, [pc, #568]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d118      	bne.n	8001948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001916:	4b8b      	ldr	r3, [pc, #556]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a8a      	ldr	r2, [pc, #552]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001922:	f7ff fbb9 	bl	8001098 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192a:	f7ff fbb5 	bl	8001098 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b64      	cmp	r3, #100	; 0x64
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0fd      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4b81      	ldr	r3, [pc, #516]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x312>
 8001950:	4b7b      	ldr	r3, [pc, #492]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a7a      	ldr	r2, [pc, #488]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	e02d      	b.n	80019ba <HAL_RCC_OscConfig+0x36e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0x334>
 8001966:	4b76      	ldr	r3, [pc, #472]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a75      	ldr	r2, [pc, #468]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a72      	ldr	r2, [pc, #456]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	6213      	str	r3, [r2, #32]
 800197e:	e01c      	b.n	80019ba <HAL_RCC_OscConfig+0x36e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0x356>
 8001988:	4b6d      	ldr	r3, [pc, #436]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a6c      	ldr	r2, [pc, #432]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a69      	ldr	r2, [pc, #420]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e00b      	b.n	80019ba <HAL_RCC_OscConfig+0x36e>
 80019a2:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4a66      	ldr	r2, [pc, #408]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6213      	str	r3, [r2, #32]
 80019ae:	4b64      	ldr	r3, [pc, #400]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a63      	ldr	r2, [pc, #396]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	f023 0304 	bic.w	r3, r3, #4
 80019b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d015      	beq.n	80019ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c2:	f7ff fb69 	bl	8001098 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff fb65 	bl	8001098 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0ab      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	4b57      	ldr	r3, [pc, #348]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ee      	beq.n	80019ca <HAL_RCC_OscConfig+0x37e>
 80019ec:	e014      	b.n	8001a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fb53 	bl	8001098 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7ff fb4f 	bl	8001098 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e095      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ee      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d105      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1e:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a47      	ldr	r2, [pc, #284]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8081 	beq.w	8001b36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d061      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d146      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <HAL_RCC_OscConfig+0x4fc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fb23 	bl	8001098 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7ff fb1f 	bl	8001098 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e067      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a68:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a7e:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	492d      	ldr	r1, [pc, #180]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a19      	ldr	r1, [r3, #32]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	4927      	ldr	r1, [pc, #156]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_RCC_OscConfig+0x4fc>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff faf3 	bl	8001098 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff faef 	bl	8001098 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e037      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x46a>
 8001ad4:	e02f      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_RCC_OscConfig+0x4fc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fadc 	bl	8001098 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff fad8 	bl	8001098 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e020      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x498>
 8001b02:	e018      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e013      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40007000 	.word	0x40007000
 8001b48:	42420060 	.word	0x42420060

08001b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0d0      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d910      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4965      	ldr	r1, [pc, #404]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0b8      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba8:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc0:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	494d      	ldr	r1, [pc, #308]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d040      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d115      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e07f      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e073      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e06b      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4936      	ldr	r1, [pc, #216]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff fa2c 	bl	8001098 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff fa28 	bl	8001098 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e053      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d210      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0207 	bic.w	r2, r3, #7
 8001c82:	4922      	ldr	r1, [pc, #136]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e032      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4916      	ldr	r1, [pc, #88]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cda:	f000 f821 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	490a      	ldr	r1, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cec:	5ccb      	ldrb	r3, [r1, r3]
 8001cee:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf2:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1cc>)
 8001cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1d0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f98a 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08002664 	.word	0x08002664
 8001d18:	20000058 	.word	0x20000058
 8001d1c:	2000005c 	.word	0x2000005c

08001d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b490      	push	{r4, r7}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d28:	1d3c      	adds	r4, r7, #4
 8001d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d30:	f240 2301 	movw	r3, #513	; 0x201
 8001d34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x40>
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x46>
 8001d5e:	e02d      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d62:	623b      	str	r3, [r7, #32]
      break;
 8001d64:	e02d      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	0c9b      	lsrs	r3, r3, #18
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d72:	4413      	add	r3, r2
 8001d74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	0c5b      	lsrs	r3, r3, #17
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d92:	4413      	add	r3, r2
 8001d94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9e:	fb02 f203 	mul.w	r2, r2, r3
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	e004      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001db0:	fb02 f303 	mul.w	r3, r2, r3
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	623b      	str	r3, [r7, #32]
      break;
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dbe:	623b      	str	r3, [r7, #32]
      break;
 8001dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc90      	pop	{r4, r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	08002654 	.word	0x08002654
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	007a1200 	.word	0x007a1200
 8001ddc:	003d0900 	.word	0x003d0900

08001de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <RCC_Delay+0x34>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <RCC_Delay+0x38>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0a5b      	lsrs	r3, r3, #9
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dfc:	bf00      	nop
  }
  while (Delay --);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	60fa      	str	r2, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f9      	bne.n	8001dfc <RCC_Delay+0x1c>
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000058 	.word	0x20000058
 8001e18:	10624dd3 	.word	0x10624dd3

08001e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e041      	b.n	8001eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff f84e 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 fa6a 	bl	8002334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d001      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e035      	b.n	8001f40 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <HAL_TIM_Base_Start_IT+0x90>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d009      	beq.n	8001f0a <HAL_TIM_Base_Start_IT+0x4e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efe:	d004      	beq.n	8001f0a <HAL_TIM_Base_Start_IT+0x4e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <HAL_TIM_Base_Start_IT+0x94>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d111      	bne.n	8001f2e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d010      	beq.n	8001f3e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2c:	e007      	b.n	8001f3e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40012c00 	.word	0x40012c00
 8001f50:	40000400 	.word	0x40000400

08001f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0202 	mvn.w	r2, #2
 8001f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f9b1 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f9a4 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f9b3 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d122      	bne.n	8002004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d11b      	bne.n	8002004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0204 	mvn.w	r2, #4
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f987 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f97a 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f989 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b08      	cmp	r3, #8
 8002010:	d122      	bne.n	8002058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b08      	cmp	r3, #8
 800201e:	d11b      	bne.n	8002058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0208 	mvn.w	r2, #8
 8002028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2204      	movs	r2, #4
 800202e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f95d 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f950 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f95f 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b10      	cmp	r3, #16
 8002064:	d122      	bne.n	80020ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b10      	cmp	r3, #16
 8002072:	d11b      	bne.n	80020ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0210 	mvn.w	r2, #16
 800207c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2208      	movs	r2, #8
 8002082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f933 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8002098:	e005      	b.n	80020a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f926 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f935 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d107      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0201 	mvn.w	r2, #1
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fe50 	bl	8000d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b80      	cmp	r3, #128	; 0x80
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b80      	cmp	r3, #128	; 0x80
 80020f2:	d107      	bne.n	8002104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fa67 	bl	80025d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210e:	2b40      	cmp	r3, #64	; 0x40
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211c:	2b40      	cmp	r3, #64	; 0x40
 800211e:	d107      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8f9 	bl	8002322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b20      	cmp	r3, #32
 800213c:	d10e      	bne.n	800215c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b20      	cmp	r3, #32
 800214a:	d107      	bne.n	800215c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0220 	mvn.w	r2, #32
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fa32 	bl	80025c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_TIM_ConfigClockSource+0x18>
 8002178:	2302      	movs	r3, #2
 800217a:	e0b3      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x180>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800219a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b4:	d03e      	beq.n	8002234 <HAL_TIM_ConfigClockSource+0xd0>
 80021b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ba:	f200 8087 	bhi.w	80022cc <HAL_TIM_ConfigClockSource+0x168>
 80021be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c2:	f000 8085 	beq.w	80022d0 <HAL_TIM_ConfigClockSource+0x16c>
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ca:	d87f      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x168>
 80021cc:	2b70      	cmp	r3, #112	; 0x70
 80021ce:	d01a      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0xa2>
 80021d0:	2b70      	cmp	r3, #112	; 0x70
 80021d2:	d87b      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x168>
 80021d4:	2b60      	cmp	r3, #96	; 0x60
 80021d6:	d050      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x116>
 80021d8:	2b60      	cmp	r3, #96	; 0x60
 80021da:	d877      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x168>
 80021dc:	2b50      	cmp	r3, #80	; 0x50
 80021de:	d03c      	beq.n	800225a <HAL_TIM_ConfigClockSource+0xf6>
 80021e0:	2b50      	cmp	r3, #80	; 0x50
 80021e2:	d873      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x168>
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d058      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x136>
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	d86f      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x168>
 80021ec:	2b30      	cmp	r3, #48	; 0x30
 80021ee:	d064      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x156>
 80021f0:	2b30      	cmp	r3, #48	; 0x30
 80021f2:	d86b      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x168>
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d060      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x156>
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d867      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x168>
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d05c      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x156>
 8002200:	2b10      	cmp	r3, #16
 8002202:	d05a      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002204:	e062      	b.n	80022cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f000 f95c 	bl	80024d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002228:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	609a      	str	r2, [r3, #8]
      break;
 8002232:	e04e      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f000 f945 	bl	80024d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002256:	609a      	str	r2, [r3, #8]
      break;
 8002258:	e03b      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	f000 f8bc 	bl	80023e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2150      	movs	r1, #80	; 0x50
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f913 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 8002278:	e02b      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	461a      	mov	r2, r3
 8002288:	f000 f8da 	bl	8002440 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2160      	movs	r1, #96	; 0x60
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f903 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 8002298:	e01b      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	461a      	mov	r2, r3
 80022a8:	f000 f89c 	bl	80023e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2140      	movs	r1, #64	; 0x40
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f8f3 	bl	800249e <TIM_ITRx_SetConfig>
      break;
 80022b8:	e00b      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f000 f8ea 	bl	800249e <TIM_ITRx_SetConfig>
        break;
 80022ca:	e002      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022cc:	bf00      	nop
 80022ce:	e000      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a25      	ldr	r2, [pc, #148]	; (80023dc <TIM_Base_SetConfig+0xa8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d007      	beq.n	800235c <TIM_Base_SetConfig+0x28>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002352:	d003      	beq.n	800235c <TIM_Base_SetConfig+0x28>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <TIM_Base_SetConfig+0xac>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d108      	bne.n	800236e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <TIM_Base_SetConfig+0xa8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <TIM_Base_SetConfig+0x52>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237c:	d003      	beq.n	8002386 <TIM_Base_SetConfig+0x52>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a17      	ldr	r2, [pc, #92]	; (80023e0 <TIM_Base_SetConfig+0xac>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d108      	bne.n	8002398 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a07      	ldr	r2, [pc, #28]	; (80023dc <TIM_Base_SetConfig+0xa8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d103      	bne.n	80023cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	615a      	str	r2, [r3, #20]
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40000400 	.word	0x40000400

080023e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f023 0201 	bic.w	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800240e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f023 030a 	bic.w	r3, r3, #10
 8002420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	621a      	str	r2, [r3, #32]
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f023 0210 	bic.w	r2, r3, #16
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800246a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	031b      	lsls	r3, r3, #12
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800247c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	621a      	str	r2, [r3, #32]
}
 8002494:	bf00      	nop
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f043 0307 	orr.w	r3, r3, #7
 80024c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b087      	sub	sp, #28
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	021a      	lsls	r2, r3, #8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	609a      	str	r2, [r3, #8]
}
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002524:	2302      	movs	r3, #2
 8002526:	e041      	b.n	80025ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d004      	beq.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a10      	ldr	r2, [pc, #64]	; (80025bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d10c      	bne.n	800259a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002586:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	4313      	orrs	r3, r2
 8002590:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40000400 	.word	0x40000400

080025c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <__libc_init_array>:
 80025e4:	b570      	push	{r4, r5, r6, lr}
 80025e6:	2600      	movs	r6, #0
 80025e8:	4d0c      	ldr	r5, [pc, #48]	; (800261c <__libc_init_array+0x38>)
 80025ea:	4c0d      	ldr	r4, [pc, #52]	; (8002620 <__libc_init_array+0x3c>)
 80025ec:	1b64      	subs	r4, r4, r5
 80025ee:	10a4      	asrs	r4, r4, #2
 80025f0:	42a6      	cmp	r6, r4
 80025f2:	d109      	bne.n	8002608 <__libc_init_array+0x24>
 80025f4:	f000 f822 	bl	800263c <_init>
 80025f8:	2600      	movs	r6, #0
 80025fa:	4d0a      	ldr	r5, [pc, #40]	; (8002624 <__libc_init_array+0x40>)
 80025fc:	4c0a      	ldr	r4, [pc, #40]	; (8002628 <__libc_init_array+0x44>)
 80025fe:	1b64      	subs	r4, r4, r5
 8002600:	10a4      	asrs	r4, r4, #2
 8002602:	42a6      	cmp	r6, r4
 8002604:	d105      	bne.n	8002612 <__libc_init_array+0x2e>
 8002606:	bd70      	pop	{r4, r5, r6, pc}
 8002608:	f855 3b04 	ldr.w	r3, [r5], #4
 800260c:	4798      	blx	r3
 800260e:	3601      	adds	r6, #1
 8002610:	e7ee      	b.n	80025f0 <__libc_init_array+0xc>
 8002612:	f855 3b04 	ldr.w	r3, [r5], #4
 8002616:	4798      	blx	r3
 8002618:	3601      	adds	r6, #1
 800261a:	e7f2      	b.n	8002602 <__libc_init_array+0x1e>
 800261c:	08002674 	.word	0x08002674
 8002620:	08002674 	.word	0x08002674
 8002624:	08002674 	.word	0x08002674
 8002628:	08002678 	.word	0x08002678

0800262c <memset>:
 800262c:	4603      	mov	r3, r0
 800262e:	4402      	add	r2, r0
 8002630:	4293      	cmp	r3, r2
 8002632:	d100      	bne.n	8002636 <memset+0xa>
 8002634:	4770      	bx	lr
 8002636:	f803 1b01 	strb.w	r1, [r3], #1
 800263a:	e7f9      	b.n	8002630 <memset+0x4>

0800263c <_init>:
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	bf00      	nop
 8002640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002642:	bc08      	pop	{r3}
 8002644:	469e      	mov	lr, r3
 8002646:	4770      	bx	lr

08002648 <_fini>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	bf00      	nop
 800264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264e:	bc08      	pop	{r3}
 8002650:	469e      	mov	lr, r3
 8002652:	4770      	bx	lr
